"""
Setup sample expense data for Madrasha accounting
"""
from app import create_app
from models import db, Expense
from datetime import date
from decimal import Decimal

app = create_app()

with app.app_context():
    try:
        # Check if expenses already exist
        existing = Expense.query.first()
        if existing:
            print('‚úÖ Expense data already exists!')
        else:
            # Sample expenses for January 2025
            expenses = [
                {
                    'category': 'salary',
                    'description': '‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶¨‡ßá‡¶§‡¶® - ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø ‡ß®‡ß¶‡ß®‡ß´',
                    'amount': Decimal('15000.00'),
                    'date': date(2025, 1, 31),
                    'recipient': '‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶Ü‡¶¨‡ßç‡¶¶‡ßÅ‡¶≤‡ßç‡¶≤‡¶æ‡¶π',
                    'payment_method': 'Cash',
                    'notes': '‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶¨‡ßá‡¶§‡¶®'
                },
                {
                    'category': 'salary',
                    'description': '‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶¨‡ßá‡¶§‡¶® - ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø',
                    'amount': Decimal('10000.00'),
                    'date': date(2025, 1, 31),
                    'recipient': '‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶Æ‡ßÅ‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶',
                    'payment_method': 'Bank Transfer',
                    'notes': '‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶â‡¶∏‡ßç‡¶§‡¶æ‡¶¶ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶¨‡ßá‡¶§‡¶®'
                },
                {
                    'category': 'books',
                    'description': '‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶¨‡¶á ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º',
                    'amount': Decimal('3500.00'),
                    'date': date(2025, 1, 15),
                    'recipient': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶¨‡ßÅ‡¶ï ‡¶°‡¶ø‡¶™‡ßã',
                    'payment_method': 'Cash',
                    'notes': '‡¶®‡¶§‡ßÅ‡¶® ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß®‡ß¶‡¶ü‡¶ø ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶¨‡¶á'
                },
                {
                    'category': 'books',
                    'description': '‡¶Ü‡¶∞‡¶¨‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶¨‡¶á',
                    'amount': Decimal('2000.00'),
                    'date': date(2025, 1, 10),
                    'recipient': '‡¶Æ‡¶ï‡ßç‡¶§‡¶¨ ‡¶¨‡ßÅ‡¶ï ‡¶∏‡ßç‡¶ü‡ßã‡¶∞',
                    'payment_method': 'Cash',
                    'notes': '‡ßß‡¶Æ ‡¶ì ‡ß®‡¶Ø‡¶º ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø'
                },
                {
                    'category': 'utilities',
                    'description': '‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé ‡¶¨‡¶ø‡¶≤ - ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø',
                    'amount': Decimal('1200.00'),
                    'date': date(2025, 1, 20),
                    'recipient': 'DESCO',
                    'payment_method': 'Online Payment',
                    'notes': '‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ ‡¶≠‡¶¨‡¶® ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡ßÅ‡ßé ‡¶¨‡¶ø‡¶≤'
                },
                {
                    'category': 'stationery',
                    'description': '‡¶ñ‡¶æ‡¶§‡¶æ, ‡¶ï‡¶≤‡¶Æ ‡¶ì ‡¶∏‡ßç‡¶ü‡ßá‡¶∂‡¶®‡¶æ‡¶∞‡¶ø',
                    'amount': Decimal('1500.00'),
                    'date': date(2025, 1, 5),
                    'recipient': '‡¶∏‡ßç‡¶ü‡ßá‡¶∂‡¶®‡¶æ‡¶∞‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü',
                    'payment_method': 'Cash',
                    'notes': '‡¶∏‡¶ï‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø'
                },
                {
                    'category': 'maintenance',
                    'description': '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶∞‡ßÅ‡¶Æ ‡¶Æ‡ßá‡¶∞‡¶æ‡¶Æ‡¶§',
                    'amount': Decimal('5000.00'),
                    'date': date(2025, 1, 12),
                    'recipient': '‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶®‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶∂‡¶®',
                    'payment_method': 'Cash',
                    'notes': '‡¶¶‡ßá‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∞‡¶Ç ‡¶ì ‡¶™‡¶æ‡¶ñ‡¶æ ‡¶Æ‡ßá‡¶∞‡¶æ‡¶Æ‡¶§'
                },
                {
                    'category': 'instruments',
                    'description': '‡¶π‡ßã‡¶Ø‡¶º‡¶æ‡¶á‡¶ü‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶ì ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º',
                    'amount': Decimal('2500.00'),
                    'date': date(2025, 1, 8),
                    'recipient': '‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶á‡¶ï‡ßÅ‡¶á‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
                    'payment_method': 'Cash',
                    'notes': '‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶∞‡ßÅ‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø'
                },
                {
                    'category': 'rent',
                    'description': '‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ ‡¶≠‡¶¨‡¶® ‡¶≠‡¶æ‡¶°‡¶º‡¶æ - ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø',
                    'amount': Decimal('12000.00'),
                    'date': date(2025, 1, 1),
                    'recipient': '‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï ‡¶∏‡¶æ‡¶π‡ßá‡¶¨',
                    'payment_method': 'Bank Transfer',
                    'notes': '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶≠‡¶æ‡¶°‡¶º‡¶æ'
                },
                {
                    'category': 'events',
                    'description': '‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶§‡¶ø‡¶≤‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ ‡¶Ü‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
                    'amount': Decimal('3000.00'),
                    'date': date(2025, 1, 25),
                    'recipient': '‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶®',
                    'payment_method': 'Cash',
                    'notes': '‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ì ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂‡¶Æ‡ßá‡¶®‡ßç‡¶ü'
                }
            ]
            
            for exp_data in expenses:
                expense = Expense(**exp_data)
                db.session.add(expense)
            
            db.session.commit()
            print('‚úÖ Sample expense data created successfully!')
            
            # Calculate totals
            total = sum(Decimal(str(exp['amount'])) for exp in expenses)
            print(f'\nüìä Total Expenses Added: ‡ß≥{total:,.2f}')
            
            print('\nüí∞ Expenses by Category:')
            by_category = {}
            for exp in expenses:
                cat = exp['category']
                if cat not in by_category:
                    by_category[cat] = Decimal('0')
                by_category[cat] += exp['amount']
            
            for cat, amount in by_category.items():
                print(f'   - {cat}: ‡ß≥{amount:,.2f}')
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()
